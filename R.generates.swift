//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 16 files.
  struct file {
    /// Resource file `ColorThemes.json`.
    static let colorThemesJson = Rswift.FileResource(bundle: R.hostingBundle, name: "ColorThemes", pathExtension: "json")
    /// Resource file `Contents.json`.
    static let contentsJson = Rswift.FileResource(bundle: R.hostingBundle, name: "Contents", pathExtension: "json")
    /// Resource file `blueWhiteCloud@2x.png`.
    static let blueWhiteCloud2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "blueWhiteCloud@2x", pathExtension: "png")
    /// Resource file `blueWhiteCloud@3x.png`.
    static let blueWhiteCloud3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "blueWhiteCloud@3x", pathExtension: "png")
    /// Resource file `cornerSun@2x.png`.
    static let cornerSun2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cornerSun@2x", pathExtension: "png")
    /// Resource file `cornerSun@3x.png`.
    static let cornerSun3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "cornerSun@3x", pathExtension: "png")
    /// Resource file `darkWhiteCloudAppIcon@2x.png`.
    static let darkWhiteCloudAppIcon2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "darkWhiteCloudAppIcon@2x", pathExtension: "png")
    /// Resource file `darkWhiteCloudAppIcon@3x.png`.
    static let darkWhiteCloudAppIcon3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "darkWhiteCloudAppIcon@3x", pathExtension: "png")
    /// Resource file `moon@2x.png`.
    static let moon2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "moon@2x", pathExtension: "png")
    /// Resource file `moon@3x.png`.
    static let moon3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "moon@3x", pathExtension: "png")
    /// Resource file `orangeCloud@2x.png`.
    static let orangeCloud2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "orangeCloud@2x", pathExtension: "png")
    /// Resource file `orangeCloud@3x.png`.
    static let orangeCloud3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "orangeCloud@3x", pathExtension: "png")
    /// Resource file `whiteSunAppIcon@2x.png`.
    static let whiteSunAppIcon2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "whiteSunAppIcon@2x", pathExtension: "png")
    /// Resource file `whiteSunAppIcon@3x.png`.
    static let whiteSunAppIcon3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "whiteSunAppIcon@3x", pathExtension: "png")
    /// Resource file `yellowSun@2x.png`.
    static let yellowSun2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "yellowSun@2x", pathExtension: "png")
    /// Resource file `yellowSun@3x.png`.
    static let yellowSun3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "yellowSun@3x", pathExtension: "png")

    /// `bundle.url(forResource: "ColorThemes", withExtension: "json")`
    static func colorThemesJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.colorThemesJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Contents", withExtension: "json")`
    static func contentsJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.contentsJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "blueWhiteCloud@2x", withExtension: "png")`
    static func blueWhiteCloud2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.blueWhiteCloud2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "blueWhiteCloud@3x", withExtension: "png")`
    static func blueWhiteCloud3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.blueWhiteCloud3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cornerSun@2x", withExtension: "png")`
    static func cornerSun2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cornerSun2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "cornerSun@3x", withExtension: "png")`
    static func cornerSun3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cornerSun3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "darkWhiteCloudAppIcon@2x", withExtension: "png")`
    static func darkWhiteCloudAppIcon2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.darkWhiteCloudAppIcon2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "darkWhiteCloudAppIcon@3x", withExtension: "png")`
    static func darkWhiteCloudAppIcon3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.darkWhiteCloudAppIcon3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "moon@2x", withExtension: "png")`
    static func moon2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.moon2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "moon@3x", withExtension: "png")`
    static func moon3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.moon3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "orangeCloud@2x", withExtension: "png")`
    static func orangeCloud2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.orangeCloud2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "orangeCloud@3x", withExtension: "png")`
    static func orangeCloud3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.orangeCloud3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "whiteSunAppIcon@2x", withExtension: "png")`
    static func whiteSunAppIcon2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.whiteSunAppIcon2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "whiteSunAppIcon@3x", withExtension: "png")`
    static func whiteSunAppIcon3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.whiteSunAppIcon3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "yellowSun@2x", withExtension: "png")`
    static func yellowSun2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.yellowSun2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "yellowSun@3x", withExtension: "png")`
    static func yellowSun3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.yellowSun3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 8 images.
  struct image {
    /// Image `DeleteAction`.
    static let deleteAction = Rswift.ImageResource(bundle: R.hostingBundle, name: "DeleteAction")
    /// Image `blueWhiteCloud`.
    static let blueWhiteCloud = Rswift.ImageResource(bundle: R.hostingBundle, name: "blueWhiteCloud")
    /// Image `cornerSun`.
    static let cornerSun = Rswift.ImageResource(bundle: R.hostingBundle, name: "cornerSun")
    /// Image `darkWhiteCloudAppIcon`.
    static let darkWhiteCloudAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "darkWhiteCloudAppIcon")
    /// Image `moon`.
    static let moon = Rswift.ImageResource(bundle: R.hostingBundle, name: "moon")
    /// Image `orangeCloud`.
    static let orangeCloud = Rswift.ImageResource(bundle: R.hostingBundle, name: "orangeCloud")
    /// Image `whiteSunAppIcon`.
    static let whiteSunAppIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "whiteSunAppIcon")
    /// Image `yellowSun`.
    static let yellowSun = Rswift.ImageResource(bundle: R.hostingBundle, name: "yellowSun")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "DeleteAction", bundle: ..., traitCollection: ...)`
    static func deleteAction(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.deleteAction, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blueWhiteCloud", bundle: ..., traitCollection: ...)`
    static func blueWhiteCloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blueWhiteCloud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cornerSun", bundle: ..., traitCollection: ...)`
    static func cornerSun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cornerSun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "darkWhiteCloudAppIcon", bundle: ..., traitCollection: ...)`
    static func darkWhiteCloudAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.darkWhiteCloudAppIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "moon", bundle: ..., traitCollection: ...)`
    static func moon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "orangeCloud", bundle: ..., traitCollection: ...)`
    static func orangeCloud(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orangeCloud, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "whiteSunAppIcon", bundle: ..., traitCollection: ...)`
    static func whiteSunAppIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.whiteSunAppIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "yellowSun", bundle: ..., traitCollection: ...)`
    static func yellowSun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.yellowSun, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = true

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 33 localization keys.
    struct localizable {
      /// en translation: Broken clouds
      ///
      /// Locales: en, ru-RU
      static let brokenClouds = Rswift.StringResource(key: "broken.clouds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, ru-RU
      static let cancaelBtn = Rswift.StringResource(key: "cancael.btn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: City
      ///
      /// Locales: en, ru-RU
      static let cityDescription = Rswift.StringResource(key: "city.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Clear sky
      ///
      /// Locales: en, ru-RU
      static let clearSky = Rswift.StringResource(key: "clear.sky", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Cloudiness
      ///
      /// Locales: en, ru-RU
      static let cloudiness = Rswift.StringResource(key: "cloudiness", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Drizzle
      ///
      /// Locales: en, ru-RU
      static let drizzle = Rswift.StringResource(key: "drizzle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Feels like
      ///
      /// Locales: en, ru-RU
      static let feelsLike = Rswift.StringResource(key: "feels.like", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Few clouds
      ///
      /// Locales: en, ru-RU
      static let fewClouds = Rswift.StringResource(key: "few.clouds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Fog
      ///
      /// Locales: en, ru-RU
      static let fog = Rswift.StringResource(key: "fog", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Humidity
      ///
      /// Locales: en, ru-RU
      static let humidity = Rswift.StringResource(key: "humidity", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Light rain
      ///
      /// Locales: en, ru-RU
      static let lightRain = Rswift.StringResource(key: "light.rain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Light snow
      ///
      /// Locales: en, ru-RU
      static let lightSnow = Rswift.StringResource(key: "light.snow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Mist
      ///
      /// Locales: en, ru-RU
      static let mist = Rswift.StringResource(key: "mist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Moderate rain
      ///
      /// Locales: en, ru-RU
      static let moderateRain = Rswift.StringResource(key: "moderate.rain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Now
      ///
      /// Locales: en, ru-RU
      static let nowTitle = Rswift.StringResource(key: "now.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Overcast clouds
      ///
      /// Locales: en, ru-RU
      static let overcastClouds = Rswift.StringResource(key: "overcast.clouds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Press the button 🔍 to add a city
      ///
      /// Locales: en, ru-RU
      static let cityEmptyDescription = Rswift.StringResource(key: "city.empty.description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Pressure
      ///
      /// Locales: en, ru-RU
      static let pressure = Rswift.StringResource(key: "pressure", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Rain
      ///
      /// Locales: en, ru-RU
      static let rain = Rswift.StringResource(key: "rain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Rain and snow
      ///
      /// Locales: en, ru-RU
      static let rainSnow = Rswift.StringResource(key: "rain.snow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Scattered clouds
      ///
      /// Locales: en, ru-RU
      static let scatteredClouds = Rswift.StringResource(key: "scattered.clouds", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Shower rain
      ///
      /// Locales: en, ru-RU
      static let showerRain = Rswift.StringResource(key: "shower.rain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Snow
      ///
      /// Locales: en, ru-RU
      static let snow = Rswift.StringResource(key: "snow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Sunrise
      ///
      /// Locales: en, ru-RU
      static let sunrise = Rswift.StringResource(key: "sunrise", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Sunset
      ///
      /// Locales: en, ru-RU
      static let sunset = Rswift.StringResource(key: "sunset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Thunderstorm
      ///
      /// Locales: en, ru-RU
      static let thunderstorm = Rswift.StringResource(key: "thunderstorm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Today
      ///
      /// Locales: en, ru-RU
      static let dayTitle = Rswift.StringResource(key: "day.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: UV index
      ///
      /// Locales: en, ru-RU
      static let uvIndex = Rswift.StringResource(key: "uv.index", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Visibility
      ///
      /// Locales: en, ru-RU
      static let visibility = Rswift.StringResource(key: "visibility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Wind
      ///
      /// Locales: en, ru-RU
      static let wind = Rswift.StringResource(key: "wind", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: You don't have any cities.
      ///
      /// Locales: en, ru-RU
      static let cityEmptyTitle = Rswift.StringResource(key: "city.empty.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: Your location
      ///
      /// Locales: en, ru-RU
      static let yourLocation = Rswift.StringResource(key: "your.location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)
      /// en translation: date label
      ///
      /// Locales: en, ru-RU
      static let dateLabel = Rswift.StringResource(key: "date.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru-RU"], comment: nil)

      /// en translation: Broken clouds
      ///
      /// Locales: en, ru-RU
      static func brokenClouds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("broken.clouds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "broken.clouds"
        }

        return NSLocalizedString("broken.clouds", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, ru-RU
      static func cancaelBtn(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancael.btn", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancael.btn"
        }

        return NSLocalizedString("cancael.btn", bundle: bundle, comment: "")
      }

      /// en translation: City
      ///
      /// Locales: en, ru-RU
      static func cityDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("city.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "city.description"
        }

        return NSLocalizedString("city.description", bundle: bundle, comment: "")
      }

      /// en translation: Clear sky
      ///
      /// Locales: en, ru-RU
      static func clearSky(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("clear.sky", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "clear.sky"
        }

        return NSLocalizedString("clear.sky", bundle: bundle, comment: "")
      }

      /// en translation: Cloudiness
      ///
      /// Locales: en, ru-RU
      static func cloudiness(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cloudiness", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cloudiness"
        }

        return NSLocalizedString("cloudiness", bundle: bundle, comment: "")
      }

      /// en translation: Drizzle
      ///
      /// Locales: en, ru-RU
      static func drizzle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("drizzle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "drizzle"
        }

        return NSLocalizedString("drizzle", bundle: bundle, comment: "")
      }

      /// en translation: Feels like
      ///
      /// Locales: en, ru-RU
      static func feelsLike(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feels.like", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "feels.like"
        }

        return NSLocalizedString("feels.like", bundle: bundle, comment: "")
      }

      /// en translation: Few clouds
      ///
      /// Locales: en, ru-RU
      static func fewClouds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("few.clouds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "few.clouds"
        }

        return NSLocalizedString("few.clouds", bundle: bundle, comment: "")
      }

      /// en translation: Fog
      ///
      /// Locales: en, ru-RU
      static func fog(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fog", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fog"
        }

        return NSLocalizedString("fog", bundle: bundle, comment: "")
      }

      /// en translation: Humidity
      ///
      /// Locales: en, ru-RU
      static func humidity(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("humidity", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "humidity"
        }

        return NSLocalizedString("humidity", bundle: bundle, comment: "")
      }

      /// en translation: Light rain
      ///
      /// Locales: en, ru-RU
      static func lightRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("light.rain", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "light.rain"
        }

        return NSLocalizedString("light.rain", bundle: bundle, comment: "")
      }

      /// en translation: Light snow
      ///
      /// Locales: en, ru-RU
      static func lightSnow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("light.snow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "light.snow"
        }

        return NSLocalizedString("light.snow", bundle: bundle, comment: "")
      }

      /// en translation: Mist
      ///
      /// Locales: en, ru-RU
      static func mist(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mist"
        }

        return NSLocalizedString("mist", bundle: bundle, comment: "")
      }

      /// en translation: Moderate rain
      ///
      /// Locales: en, ru-RU
      static func moderateRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("moderate.rain", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "moderate.rain"
        }

        return NSLocalizedString("moderate.rain", bundle: bundle, comment: "")
      }

      /// en translation: Now
      ///
      /// Locales: en, ru-RU
      static func nowTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("now.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "now.title"
        }

        return NSLocalizedString("now.title", bundle: bundle, comment: "")
      }

      /// en translation: Overcast clouds
      ///
      /// Locales: en, ru-RU
      static func overcastClouds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("overcast.clouds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "overcast.clouds"
        }

        return NSLocalizedString("overcast.clouds", bundle: bundle, comment: "")
      }

      /// en translation: Press the button 🔍 to add a city
      ///
      /// Locales: en, ru-RU
      static func cityEmptyDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("city.empty.description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "city.empty.description"
        }

        return NSLocalizedString("city.empty.description", bundle: bundle, comment: "")
      }

      /// en translation: Pressure
      ///
      /// Locales: en, ru-RU
      static func pressure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pressure", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pressure"
        }

        return NSLocalizedString("pressure", bundle: bundle, comment: "")
      }

      /// en translation: Rain
      ///
      /// Locales: en, ru-RU
      static func rain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rain", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rain"
        }

        return NSLocalizedString("rain", bundle: bundle, comment: "")
      }

      /// en translation: Rain and snow
      ///
      /// Locales: en, ru-RU
      static func rainSnow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("rain.snow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "rain.snow"
        }

        return NSLocalizedString("rain.snow", bundle: bundle, comment: "")
      }

      /// en translation: Scattered clouds
      ///
      /// Locales: en, ru-RU
      static func scatteredClouds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("scattered.clouds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "scattered.clouds"
        }

        return NSLocalizedString("scattered.clouds", bundle: bundle, comment: "")
      }

      /// en translation: Shower rain
      ///
      /// Locales: en, ru-RU
      static func showerRain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shower.rain", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "shower.rain"
        }

        return NSLocalizedString("shower.rain", bundle: bundle, comment: "")
      }

      /// en translation: Snow
      ///
      /// Locales: en, ru-RU
      static func snow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("snow", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "snow"
        }

        return NSLocalizedString("snow", bundle: bundle, comment: "")
      }

      /// en translation: Sunrise
      ///
      /// Locales: en, ru-RU
      static func sunrise(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sunrise", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sunrise"
        }

        return NSLocalizedString("sunrise", bundle: bundle, comment: "")
      }

      /// en translation: Sunset
      ///
      /// Locales: en, ru-RU
      static func sunset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sunset", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sunset"
        }

        return NSLocalizedString("sunset", bundle: bundle, comment: "")
      }

      /// en translation: Thunderstorm
      ///
      /// Locales: en, ru-RU
      static func thunderstorm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thunderstorm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "thunderstorm"
        }

        return NSLocalizedString("thunderstorm", bundle: bundle, comment: "")
      }

      /// en translation: Today
      ///
      /// Locales: en, ru-RU
      static func dayTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("day.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day.title"
        }

        return NSLocalizedString("day.title", bundle: bundle, comment: "")
      }

      /// en translation: UV index
      ///
      /// Locales: en, ru-RU
      static func uvIndex(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("uv.index", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "uv.index"
        }

        return NSLocalizedString("uv.index", bundle: bundle, comment: "")
      }

      /// en translation: Visibility
      ///
      /// Locales: en, ru-RU
      static func visibility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("visibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "visibility"
        }

        return NSLocalizedString("visibility", bundle: bundle, comment: "")
      }

      /// en translation: Wind
      ///
      /// Locales: en, ru-RU
      static func wind(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wind", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wind"
        }

        return NSLocalizedString("wind", bundle: bundle, comment: "")
      }

      /// en translation: You don't have any cities.
      ///
      /// Locales: en, ru-RU
      static func cityEmptyTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("city.empty.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "city.empty.title"
        }

        return NSLocalizedString("city.empty.title", bundle: bundle, comment: "")
      }

      /// en translation: Your location
      ///
      /// Locales: en, ru-RU
      static func yourLocation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("your.location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "your.location"
        }

        return NSLocalizedString("your.location", bundle: bundle, comment: "")
      }

      /// en translation: date label
      ///
      /// Locales: en, ru-RU
      static func dateLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("date.label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "date.label"
        }

        return NSLocalizedString("date.label", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "cloud.sun.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'cloud.sun.fill' is used in storyboard 'LaunchScreen', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
